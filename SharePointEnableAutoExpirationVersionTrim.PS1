Clear-Host
#
#
#            _________.__                        __________      .__        __ ________   ________.________       __________              
#           /   _____/|  |__ _____ _______   ____\______   \____ |__| _____/  |\_____  \ /  _____/|   ____/       \______   \____ ______  
#           \_____  \ |  |  \\__  \\_  __ \_/ __ \|     ___/  _ \|  |/    \   __\_(__  </   __  \ |____  \         |     ___/    \\____ \ 
#           /        \|   Y  \/ __ \|  | \/\  ___/|    |  (  <_> )  |   |  \  | /       \  |__\  \/       \        |    |  |   |  \  |_> >
#          /_______  /|___|  (____  /__|    \___  >____|   \____/|__|___|  /__|/______  /\_____  /______  /        |____|  |___|  /   __/ 
#                  \/      \/     \/            \/                       \/           \/       \/       \/                      \/|__|    
# 
#
#
#                  - R√©alis√© par KERLOC'H Jean-Philip @ HashTag -
#                            - PRECISION @ 2025 -


# ---------------------------------------------#
# A faire uniquement √† la premiere execution   #
# ---------------------------------------------#
# Register-PnPEntraIDApp -ApplicationName "PnP-Microsoft365" -Tenant "precisionglobalmigration.onmicrosoft.com"
# Set-ExecutionPolicy Bypass -Scope CurrentUser -Force

# ------------------------------------------------#
# V√©rification de l'√©tat du repository PSGallery  #
# ------------------------------------------------#

$repository = Get-PSRepository -Name 'PSGallery' -ErrorAction SilentlyContinue

if ($repository -and $repository.InstallationPolicy -eq 'Trusted') {
    Write-Host "Le repository 'PSGallery' est d√©j√† d√©fini comme Trusted." -ForegroundColor Green
    Start-Sleep -Seconds 2
} else {
    Write-Host "Le repository 'PSGallery' n'est pas Trusted. Mise √† jour en cours..." -ForegroundColor Yellow
    Start-Sleep -Seconds 2
    try {
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Write-Host "Le repository 'PSGallery' a √©t√© d√©fini en mode Trusted avec succ√®s." -ForegroundColor Green
        Start-Sleep -Seconds 2
    } catch {
        Write-Host "Erreur lors de la mise √† jour du repository 'PSGallery'. V√©rifiez vos permissions." -ForegroundColor Red
        Start-Sleep -Seconds 2
        exit
    }
}


# ------------------------------------------------#
# V√©rification et installation de PnP.PowerShell  #
# ------------------------------------------------#

# V√©rification si le module est install√©
$moduleName = "PnP.PowerShell"
if (Get-Module -ListAvailable -Name $moduleName) {
    Write-Host "Le module '$moduleName' est d√©j√† install√©." -ForegroundColor Green
    Start-Sleep -Seconds 2
} else {
    Write-Host "Le module '$moduleName' n'est pas install√©. Installation en cours..." -ForegroundColor Yellow
    Start-Sleep -Seconds 2
    try {
        Install-Module -Name $moduleName -Force -Confirm:$false
        Write-Host "Le module '$moduleName' a √©t√© install√© avec succ√®s." -ForegroundColor Green
        Start-Sleep -Seconds 2
    } catch {
        Write-Host "Erreur lors de l'installation du module '$moduleName'. V√©rifiez vos permissions." -ForegroundColor Red
        Start-Sleep -Seconds 2
        exit
    }
}


# ---------------------------------------#
# V√©rification de la version PowerShell  #
# ---------------------------------------#

# R√©cup√©rer la version actuelle de PowerShell
$psVersion = $PSVersionTable.PSVersion.Major

if ($psVersion -lt 7) {
    Write-Host "PowerShell 7 est requis. Installation en cours..." -ForegroundColor Yellow
    # V√©rifier si winget est install√©
    if (Get-Command winget -ErrorAction SilentlyContinue) {
        # Installer PowerShell 7 avec winget
        winget install --id Microsoft.PowerShell --source winget --accept-source-agreements --accept-package-agreements
        Write-Host "Installation termin√©e. Veuillez red√©marrer votre terminal et ex√©cuter √† nouveau le script." -ForegroundColor Green
        Start-Sleep -Seconds 2
    } else {
        Write-Host "Winget n'est pas install√© sur ce syst√®me. Veuillez l'installer manuellement depuis le site Microsoft." -ForegroundColor Red
        Start-Sleep -Seconds 2
    }
    exit
}

Write-Host "PowerShell 7 d√©tect√©. Poursuite de l'ex√©cution du script..." -ForegroundColor Green

# ----------------------------#
# Connexion √† SharePoint      #
# ----------------------------#

# R√©cup√©ration dynamique du r√©pertoire utilisateur
$userProfile = $env:USERPROFILE

# D√©finition du chemin du certificat en fonction de l'utilisateur connect√©
$secureCertificatePass = "$userProfile\OneDrive - Precision Global\Documents\PnP-SharePoint\PnP-Microsoft365.pfx"

# V√©rification si le fichier de certificat existe
if (-Not (Test-Path $secureCertificatePass)) {
    Write-Host "Le fichier de certificat n'existe pas : $secureCertificatePass" -ForegroundColor Red
    Start-Sleep -Seconds 2
    exit
}
Write-Host "Chemin du certificat utilis√© : $secureCertificatePass" -ForegroundColor Green
Start-Sleep -Seconds 2

# Chemin du certificat PFX
$siteUrl = "https://precisionglobalmigration.sharepoint.com"
$clientId = "5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd"
$tenant = "precisionglobalmigration.onmicrosoft.com"
$Thumbprint ="5C26D932379DBBE4E459A57926C8147A6CE1AACD"

try {
    #Connect-PnPOnline -Tenant $tenant -Url $siteUrl -ClientId $clientId -Thumbprint $Thumbprint
    Connect-PnPOnline -Url $siteUrl -ClientId $clientId -CertificatePath $secureCertificatePass -Tenant $tenant
    Write-Host "Connexion √† SharePoint r√©ussie." -ForegroundColor Green
    Start-Sleep -Seconds 2
} catch {
    Write-Host "√âchec de la connexion √† SharePoint. V√©rifiez les informations d'identification." -ForegroundColor Red
    Start-Sleep -Seconds 2
    exit
}



Install-Module -Name Microsoft.Online.SharePoint.PowerShell -Force
Import-Module Microsoft.Online.SharePoint.PowerShell
Connect-SPOService -Url https://precisionglobalmigration-admin.sharepoint.com -ClientId $clientId -CertificatePath $secureCertificatePass -Tenant $tenant

















####################### POUR TEST ############################
Connect-PnPOnline -Url 'https://precisionglobalmigration.sharepoint.com' -ClientId '5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd' -Interactive
Get-PnPSiteFileVersionBatchDeleteJobStatus
#New-PnPSiteFileVersionBatchDeleteJob -Automatic

Connect-PnPOnline -Url 'https://precisionglobalmigration.sharepoint.com/sites/PVAustralia' -ClientId '5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd' -Interactive
Get-PnPSiteFileVersionBatchDeleteJobStatus
#New-PnPSiteFileVersionBatchDeleteJob -Automatic

Connect-PnPOnline -Url 'https://precisionglobalmigration.sharepoint.com/sites/CENTRALFINANCE' -ClientId '5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd' -Interactive
Get-PnPSiteFileVersionBatchDeleteJobStatus
#New-PnPSiteFileVersionBatchDeleteJob -Automatic

Get-PnPTenant | Format-List *version*

###############################################################










################# AJOUT JPK OWNER PARTOUT ###################
# === Param√®tres ===
$yourUPN = "Jean-Philip.kerloch@precisionglobal.com"
$tenantAdminUrl = "https://precisionglobalmigration.sharepoint.com"

# === Connexion au centre SharePoint ===
Connect-PnPOnline -Url $tenantAdminUrl -ClientId "5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd" -Interactive

# === R√©cup√©ration de tous les sites (hors personnels, app catalog, etc.) ===
$sites = Get-PnPTenantSite | Where-Object {
    $_.Template -ne "SRCHCEN#0" -and
    $_.Url -notlike "*-my.sharepoint.com*" -and
    $_.Url -notlike "*AppCatalog*" -and
    $_.Url -notlike "*portals/hub*"
}

# === Ajout comme Owner sur chaque site ===
foreach ($site in $sites) {
    try {
        Write-Host "üîÑ Ajout de $yourUPN comme OWNER sur : $($site.Url)" -ForegroundColor Cyan
        Set-PnPTenantSite -Url $site.Url -Owners $yourUPN -ErrorAction Stop
        Write-Host "‚úÖ Ajout√© avec succ√®s sur $($site.Url)" -ForegroundColor Green
    }
    catch {
        Write-Warning "‚ùå √âchec sur $($site.Url) : $($_.Exception.Message)"
    }
}
###############################################################






################# JOB EnableAutoExpirationVersionTrim + Activation JOB ###################
# Connexion initiale au tenant
Connect-PnPOnline -Url "https://precisionglobalmigration.sharepoint.com" -ClientId "5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd" -Interactive

# R√©cup√©ration des sites (hors personnels, appcatalog, search center)
$sites = Get-PnPTenantSite | Where-Object { 
    $_.Template -ne "SRCHCEN#0" -and 
    $_.Url -notlike "*-my.sharepoint.com*" -and 
    $_.Url -notlike "*AppCatalog*" 
}

foreach ($site in $sites) {
    try {
        Write-Host "üîÑ Traitement de : $($site.Url)" -ForegroundColor Cyan

        # Connexion au site
        Connect-PnPOnline -Url $site.Url -ClientId "5ebb53ec-b0a0-45cf-b9d2-a8f9db1d62fd" -Interactive

        # Activation du property bag
        Set-PnPPropertyBagValue -Key "EnableAutoExpirationVersionTrim" -Value "true" -ErrorAction Stop
        Write-Host "‚úÖ Cl√© activ√©e sur $($site.Url)" -ForegroundColor Green

        # Lancer le job de suppression automatique
        New-PnPSiteFileVersionBatchDeleteJob -Automatic -ErrorAction Stop
        Write-Host "üöÄ Job lanc√© sur $($site.Url)" -ForegroundColor Yellow
    }
    catch {
        Write-Warning "‚ùå Erreur sur le site $($site.Url) : $($_.Exception.Message)"
    }
}
###########################################################################################